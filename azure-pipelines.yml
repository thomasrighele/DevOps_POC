# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

pool:
  vmImage: 'ubuntu-latest'

steps:
- checkout: self
  persistCredentials: true

- task: CmdLine@2
  inputs:
    script: |
      
      SETLOCAL ENABLEDELAYEDEXPANSION
      SET String=Abc_Test
      CALL :LoCase String
      SET String
      echo "##vso[task.setvariable variable=FOO]%string%"
      ENDLOCAL
      GOTO:EOF


      :LoCase
      :: Subroutine to convert a variable VALUE to all lower case.
      :: The argument for this subroutine is the variable NAME.
      SET %~1=!%~1:A=a!
      SET %~1=!%~1:B=b!
      SET %~1=!%~1:C=c!
      SET %~1=!%~1:D=d!
      SET %~1=!%~1:E=e!
      SET %~1=!%~1:F=f!
      SET %~1=!%~1:G=g!
      SET %~1=!%~1:H=h!
      SET %~1=!%~1:I=i!
      SET %~1=!%~1:J=j!
      SET %~1=!%~1:K=k!
      SET %~1=!%~1:L=l!
      SET %~1=!%~1:M=m!
      SET %~1=!%~1:N=n!
      SET %~1=!%~1:O=o!
      SET %~1=!%~1:P=p!
      SET %~1=!%~1:Q=q!
      SET %~1=!%~1:R=r!
      SET %~1=!%~1:S=s!
      SET %~1=!%~1:T=t!
      SET %~1=!%~1:U=u!
      SET %~1=!%~1:V=v!
      SET %~1=!%~1:W=w!
      SET %~1=!%~1:X=x!
      SET %~1=!%~1:Y=y!
      SET %~1=!%~1:Z=z!
      GOTO:EOF

- task: CmdLine@2
  inputs:
    script: |
      echo This is a test $(FOO)


#- task: CmdLine@2
#  name: Export_IICS
#  displayName: Run IICS Utility an Export into Staging Folder
#  inputs:
#    script: |
#      git clone "https://Thomas.Righele:wsm7mv4mjik3zxjlyarwyvmfbgx6n3wsjxdenit5y5tqrwyjchkq@guycarp.visualstudio.com/GC%20Integration/_git/GC%20Integration"
#         chmod +x "$(System.DefaultWorkingDirectory)/GC%20Integration/IICS Asset Management Utility/iics_linux"
#          if [ $(input.Source_Environment) == "DEV" ]; then
#            "$(System.DefaultWorkingDirectory)/GC%20Integration/IICS Asset Management Utility/iics_linux" export --artifacts "Explore/$(Build.Repository.Name).Project" --name "AzureDevops_Build-$(Build.BuildNumber)" --password "$(iicscred.DEV_Password)" --podHostName "dm-us.informaticacloud.com" --region "us" --username "$(iicscred.DEV_Username)" --zipFilePath "$(Build.ArtifactStagingDirectory)/$(Build.Repository.Name).zip"
#          else 
#           if [ $(input.Source_Environment) == "SIT" ]; then
#             "$(System.DefaultWorkingDirectory)/GC%20Integration/IICS Asset Management Utility/iics_linux" export --artifacts "Explore/$(Build.Repository.Name).Project" --name "AzureDevops_Build-$(Build.BuildNumber)" --password "$(iicscred.SIT_Password)" --podHostName "dm-us.informaticacloud.com" --region "us" --username "$(iicscred.SIT_Username)" --zipFilePath "$(Build.ArtifactStagingDirectory)/$(Build.Repository.Name).zip"
#            else 
#              echo "Can only process DEV and SIT Sources right now"
#              exit 125
#            fi
#          fi
#         rm -R -f "GC%20Integration"



#- task: UniversalPackages@0
#  displayName: Universal Publish
#  inputs:
#    command: publish
#    publishDirectory: '$(Build.ArtifactStagingDirectory)'
#    vstsFeedPublish: 'GC Integration/IICS_Packages'
#    vstsFeedPackagePublish: 'devops_poc'
#    packagePublishDescription: 'Package downloaded from $(input.Source_Environment)'

