# Build Pipeline Template for Informatica Intelligent Cloud Services
#
# Build is designed to export IICS Package and publish it to our artifactoy: https://artifactory.nasa.azu.mrshmc.com/artifactory 


trigger:
- master
- release/*

variables:
# Variables used from our Pipeline Library
- group: artifactory_vars
- group: azure_creds
- group: iics_creds


pool:
# Uses on-prem Agent to run script as we cannot publish to our artifactory outside of the network
  name: Default
  demands:
  - agent.name -equals gcnl-blag-rayfg-build


steps:
# Used to choose correct IICS credentials and correct pod Host Name  
- task: CmdLine@2
  name: Variable_Set
  displayName: Set Environment Variables
  inputs:
    script: |
      if [ $(input.Source_Environment) == "DEV" ]; then
        echo "##vso[task.setvariable variable=iicsusername]$(iicscred.Username_DEV)"
        echo "##vso[task.setvariable variable=iicspassword]$(iicscred.Password_DEV)"
        echo "##vso[task.setvariable variable=podHostName]dm-us.informaticacloud.com"
      else
        if [ $(input.Source_Environment) == "PRE" ]; then
          echo "##vso[task.setvariable variable=iicsusername]$(iicscred.Username_PRE)"
          echo "##vso[task.setvariable variable=iicspassword]$(iicscred.Password_PRE)"
          echo "##vso[task.setvariable variable=podHostName]dmr-us.informaticacloud.com"
        else
          if [ $(input.Source_Environment) == "SIT" ]; then
            echo "##vso[task.setvariable variable=iicsusername]$(iicscred.Username_SIT)"
            echo "##vso[task.setvariable variable=iicspassword]$(iicscred.Password_SIT)"
            echo "##vso[task.setvariable variable=podHostName]dm-us.informaticacloud.com"
          else
            if [ $(input.Source_Environment) == "QA" ]; then
              echo "##vso[task.setvariable variable=iicsusername]$(iicscred.Username_QA)"
              echo "##vso[task.setvariable variable=iicspassword]$(iicscred.Password_QA)"
              echo "##vso[task.setvariable variable=podHostName]dm-us.informaticacloud.com"
            else
              if [ $(input.Source_Environment) == "PPD" ]; then 
                echo "##vso[task.setvariable variable=iicsusername]$(iicscred.Username_PPD)"
                echo "##vso[task.setvariable variable=iicspassword]$(iicscred.Password_PPD)"
                echo "##vso[task.setvariable variable=podHostName]dm-us.informaticacloud.com"
              else
                if [ $(input.Source_Environment) == "PROD" ]; then
                  echo "##vso[task.setvariable variable=iicsusername]$(iicscred.Username_PROD)"
                  echo "##vso[task.setvariable variable=iicspassword]$(iicscred.Password_PROD)"
                  echo "##vso[task.setvariable variable=podHostName]dm-us.informaticacloud.com" 
                else
                  echo "Valid environment not selected at Build Runtime"
                  exit 125
                fi
              fi
            fi
          fi
        fi  
      fi

# Clones the "GC Integration" Azure Repo to obtain the IICS Asset Management Utility so we can export the IICS package
- task: CmdLine@2
  name: Export_IICS
  displayName: Run IICS Utility to Export IICS Package
  inputs:
    script: |
      git clone "https://$(azure_username):$(azure_password)@guycarp.visualstudio.com/GC%20Integration/_git/GC%20Integration"
      chmod +x "$(System.DefaultWorkingDirectory)/GC%20Integration/IICS Asset Management Utility/iics_linux"
      "$(System.DefaultWorkingDirectory)/GC%20Integration/IICS Asset Management Utility/iics_linux" export --artifacts "Explore/$(Build.Repository.Name).Project" --name "AzureDevops_Build-$(Build.BuildNumber)" --password "$(iicspassword)" --podHostName "$(podHostName)" --region "us" --username "$(iicsusername)" --zipFilePath "$(Build.ArtifactStagingDirectory)/$(Build.Repository.Name).zip"
      rm -R -f "GC%20Integration"

#Uploads to our Artifactory
- task: Shellpp@0
  displayName: 'Upload to Artifactory'
  inputs:
    type: 'InlineScript'
    script: |
      curl -k -u$(artifactory_username):$(artifactory_password) -T $(Build.ArtifactStagingDirectory)/$(Build.Repository.Name).zip "https://$(artifactory_registry)/$(Build.Repository.Name)/$(Build.Repository.Name)_$(Build.BuildNumber).zip;Environment=$(input.Source_Environment)"